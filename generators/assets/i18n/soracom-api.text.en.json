{
  "auth": {
    "auth": {
      "post": {
        "summary": "Authenticate the API accessAPI, return an API key and API token",
        "description": "It authenticates the API access. The following information must be included in the request: when doing authentication using a root account, the e-mail and password; when doing authentication using an authentication key, the authKeyId and authKey; when doing authentication using a SAM user, the operatorId, userName, and password. If the authentication is successful, it returns an API key and API token. When making further requests that require authentication, please include the API key and API token in the header of the request.",
        "parameters": {
          "auth": {
            "description": "Authentication request."
          }
        },
        "responses": {
          "status200": {
            "description": "Authentication successful."
          },
          "status401": {
            "description": "Authentication failed."
          }
        },
        "cli": {
          "summary": "Performs authentication, issues an API Key and an API Token if successful.",
          "description": "Performs authentication to access to the SORACOM API.\nTo perform authentication by a root account, specify `--email` and `--password`.\nTo perform authentication by an AuthKey, specify `--auth-key-id` and `--auth-key`.\nTo perform authentication by a SAM user, specify `--operator-id`, `--user-name` and `--password`. An API Key and an API Token will be shown if successful."
        }
      }
    },
    "issue_password_reset_token": {
      "post": {
        "summary": "Generate a one-time token for resetting the password",
        "description": "Generates a one-time token for resetting the password and sends it to the operator's e-mail address. To set the new password, retrieve the token from the e-mail and call the /v1/auth/password_reset_token/verify API.",
        "responses": {
          "status200": {
            "description": "OK"
          },
          "status400": {
            "description": "The e-mail address is incorrect."
          }
        },
        "cli": {
          "summary": "Issues a password reset token for the operator.",
          "description": "Generates a password reset token and send it to the operator's mail address. After receiving the password reset token, run 'soracom auth verify-password-reset-token' with the token to update operator's password."
        }
      }
    },
    "verify_password_reset_token": {
      "post": {
        "summary": "Test the password reset token and update the operator's password.",
        "description": "Tests the password reset token. If successful, it updates the operator's password.",
        "responses": {
          "status200": {
            "description": "OK"
          },
          "status400": {
            "description": "An invalid token has been specified."
          },
          "status404": {
            "description": "The token has expired."
          }
        },
        "cli": {
          "summary": "Verifies the password reset token and updates password.",
          "description": "Updates the operator's password if the password reset token is verified."
        }
      }
    }
  },
  "credentials": {
    "list_credentials": {
      "get": {
        "summary": "List of credentials.",
        "description": "Returns a list of credentials.",
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "create_credential": {
      "post": {
        "summary": "Create a credential.",
        "description": "Creates a new credential.",
        "responses": {
          "status201": {
            "description": "Created"
          }
        }
      }
    },
    "update_credential": {
      "put": {
        "summary": "Update a credential.",
        "description": "Updates a credential.",
        "responses": {
          "status200": {
            "description": "OK"
          },
          "status400": {
            "description": "There was an error in the request or the specified token has already expired. (In the latter case, you will need to use the /auth API to do authentication once again.)"
          }
        }
      }
    },
    "delete_credential": {
      "delete": {
        "summary": "Delete a credential.",
        "description": "Deletes a credential."
      }
    },
    "cli": {
      "summary": "List, create, update or delete credentials sets.",
      "description": "List, create, update or delete credentials sets."
    }
  },
  "operator": {
    "create_operator": {
      "post": {
        "summary": "Create Operator",
        "description": "Makes a request to create a new operator. An e-mail is sent to the e-mail address specified in the parameters, containing a one-time token for verifying the operatorâ€™s registration.",
        "responses": {
          "status200": {
            "description": "Operator created."
          },
          "status400": {
            "description": "The e-mail address is already registered or the password has an incorrect format."
          }
        }
      }
    },
    "issue_email_change_token": {
      "post": {
        "summary": "Issue Email Change Token",
        "description": "Sends an e-mail with a one-time token for executing the e-mail address change."
      }
    },
    "verify_email_change_token": {
      "post": {
        "summary": "Verify Email Change Token",
        "description": "Verifies the token for the e-mail address change, and then changes the e-mail address."
      }
    },
    "verify_operator": {
      "post": {
        "summary": "Verify Operator",
        "description": "Verifies the operator's registration. Called by setting as parameter the one-time verification token received via e-mail.",
        "responses": {
          "status200": {
            "description": "Registration successful."
          },
          "status400": {
            "description": "The one-time token is incorrect."
          },
          "status404": {
            "description": "The one-time token has expired."
          }
        }
      }
    },
    "get_operator": {
      "get": {
        "summary": "Get Operator",
        "description": "Returns information about the operator.",
        "responses": {
          "status200": {
            "description": "OK"
          },
          "status400": {
            "description": "Invalid Operator Id"
          }
        }
      }
    },
    "list_operator_auth_keys": {
      "get": {
        "summary": "List Operator AuthKeys",
        "description": "Returns the operator's AuthKey list.",
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "generate_operator_auth_key": {
      "post": {
        "summary": "Generate Operator AuthKey",
        "description": " Generates an AuthKey for the operator.",
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "delete_operator_auth_key": {
      "delete": {
        "summary": "Delete Operator AuthKey",
        "description": "Deletes an AuthKey from the operator.",
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "update_operator_password": {
      "post": {
        "summary": "Update Operator Password",
        "description": "Updates the operator's password.",
        "responses": {
          "status200": {
            "description": "OK"
          },
          "status400": {
            "description": "Invalid password."
          }
        }
      }
    },
    "generate_support_token": {
      "post": {
        "summary": "Generate Token for Support Console",
        "description": "Returns a token for accessing the support console.",
        "responses": {
          "status200": {
            "description": "OK"
          },
          "status400": {
            "description": "Invalid Operator Id"
          },
          "status403": {
            "description": "Invalid token."
          }
        }
      }
    },
    "generate_auth_token": {
      "post": {
        "summary": "Generate Authentication Token",
        "description": "Generates a new API token. If you insert the current API token into the header and make a request, a response is returned containing the new API token. You can then use the new API token in future requests.",
        "responses": {
          "status200": {
            "description": "OK"
          },
          "status400": {
            "description": "There was an error in the request or the specified token has already expired. (In the latter case, you will need to use the /auth API to do authentication once again.)"
          }
        }
      }
    },
    "cli": {
      "summary": "Manage operators.",
      "description": "Manage operators."
    },
    "auth_keys": {
      "cli": {
        "summary": "List, create or delete operator's AuthKeys.",
        "description": "List, create or delete operator's AuthKeys."
      }
    }
  },
  "roles": {
    "list_roles": {
      "get": {
        "summary": "List Roles",
        "description": "Returns a list of roles.",
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "get_role": {
      "get": {
        "summary": "Get Role",
        "description": "Retrieves a role.",
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "create_role": {
      "post": {
        "summary": "Create Role",
        "description": "Adds a new role.",
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "update_role": {
      "put": {
        "summary": "Update Role",
        "description": "Edits a role."
      }
    },
    "delete_role": {
      "delete": {
        "summary": "Delete Role",
        "description": "Deletes a role."
      }
    },
    "list_role_attached_users": {
      "get": {
        "summary": "List Role Attached Users",
        "description": "Retrieves a list of users attached to a role.",
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "list_user_roles": {
      "get": {
        "summary": "List User Roles",
        "description": "Retrieves a list of the user's roles.",
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "attach_role": {
      "post": {
        "summary": "Attach Role to User",
        "description": "Attaches a role to a user."
      }
    },
    "detach_role": {
      "delete": {
        "summary": "Detach Role from User",
        "description": "Detaches a role from a user."
      }
    },
    "cli": {
      "summary": "List, create, update or delete roles.",
      "description": "List, create, update or delete roles."
    }
  },
  "shipping_addresses": {
    "list_shipping_addresses": {
      "get": {
        "summary": "List shipping addresses",
        "description": "Returns a list of shipping addresses.",
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "create_shipping_address": {
      "post": {
        "summary": "Create shipping address",
        "description": "Creates a new shipping address.",
        "responses": {
          "status200": {
            "description": "OK"
          },
          "status201": {
            "description": "shippingAddreddId"
          }
        }
      }
    },
    "get_shipping_address": {
      "get": {
        "summary": "Get shipping address",
        "description": "Returns a shipping address.",
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "update_shipping_address": {
      "put": {
        "summary": "Update shipping address",
        "description": "Updates a shipping address."
      }
    },
    "delete_shipping_address": {
      "delete": {
        "summary": "Delete shipping address",
        "description": "Deletes a shipping address."
      }
    },
    "cli": {
      "summary": "List, create, update or delete shipping addresses.",
      "description": "List, create, update or delete shipping addresses."
    }
  },
  "users": {
    "list_users": {
      "get": {
        "summary": "List Users",
        "description": "Returns a list of SAM users.",
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "get_user": {
      "get": {
        "summary": "Get User",
        "description": "Returns a SAM user.",
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "create_user": {
      "post": {
        "summary": "Create User",
        "description": "Adds a new SAM user."
      }
    },
    "update_user": {
      "put": {
        "summary": "Update User",
        "description": "Updates the SAM user.",
        "responses": {
          "status404": {
            "description": "SAM User not found."
          }
        }
      }
    },
    "delete_user": {
      "delete": {
        "summary": "Delete User",
        "description": "Deletes the SAM user.",
        "responses": {
          "status404": {
            "description": "SAM User not found."
          }
        }
      }
    },
    "list_user_auth_keys": {
      "get": {
        "summary": "List User AuthKeys",
        "description": "Returns the SAM user's AuthKey list.",
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "generate_user_auth_key": {
      "post": {
        "summary": "Generate AuthKey",
        "description": "Generates an AuthKey for the SAM user.",
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "get_user_auth_key": {
      "get": {
        "summary": "Get AuthKey",
        "description": "Returns the SAM user's AuthKey.",
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "delete_user_auth_key": {
      "delete": {
        "summary": "Delete User AuthKey",
        "description": "Deletes an AuthKey from the SAM user.",
        "responses": {
          "status404": {
            "description": "AuthKey not found."
          }
        }
      }
    },
    "has_user_password": {
      "get": {
        "summary": "Has User Password",
        "description": "Retrieves whether the SAM user has a password or not.",
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "create_user_password": {
      "post": {
        "summary": "Create Password",
        "description": "Creates a password for the SAM user."
      }
    },
    "update_user_password": {
      "put": {
        "summary": "Update Password",
        "description": "Updates the password of the SAM user."
      }
    },
    "delete_user_password": {
      "delete": {
        "summary": "Delete Password",
        "description": "Deletes the user's password.",
        "responses": {
          "status404": {
            "description": "Password registration is required."
          }
        }
      }
    },
    "get_user_permission": {
      "get": {
        "summary": "Get User Permission",
        "description": "Retrieves the SAM user's permissions.",
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "update_user_permission": {
      "put": {
        "summary": "Update Permission to User",
        "description": "Updates the SAM user's permissions."
      }
    },
    "cli": {
      "summary": "Manage SAM users.",
      "description": "Manage SAM users."
    },
    "auth_keys": {
      "cli": {
        "summary": "List, create or delete SAM user's AuthKeys.",
        "description": "List, create or delete SAM user's AuthKeys."
      }
    },
    "password": {
      "cli": {
        "summary": "Create, update or delete SAM user's password.",
        "description": "Create, update or delete SAM user's password."
      }
    },
    "permissions": {
      "cli": {
        "summary": "Show, create and update SAM user's permission.",
        "description": "Show, create and update SAM user's permission."
      }
    }
  },
  "subscribers": {
    "list_subscribers": {
      "get": {
        "summary": "List Subscribers",
        "description": "Returns a list of subscribers that match a certain criteria. If the total number of subscribers does not fit in one page, a URL for accessing the next page is returned in the 'Link' header of the response.",
        "parameters": {
          "tag_name": {
            "description": "Tag name for filtering the search (exact match)."
          },
          "tag_value": {
            "description": "Tag search string for filtering the search. Required when `tag_name` has been specified."
          },
          "tag_value_match_mode": {
            "description": "Tag match mode."
          },
          "status_filter": {
            "description": "Status for filtering the search. Can specify multiple values delimited by `|`. Valid values include: `active`, `inactive`, `ready`, `instock`, `shipped`, `suspended`, and `terminated`."
          },
          "speed_class_filter": {
            "description": "Speed class for filtering the search. Can specify multiple values delimited by `|`. Valid values include: `s1.minimum`, `s1.slow`, `s1.standard`, `s1.fast`"
          },
          "limit": {
            "description": "Maximum number of subscribers to retrieve."
          },
          "last_evaluated_key": {
            "description": "The IMSI of the last subscriber retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next subscriber onward."
          }
        },
        "responses": {
          "status200": {
            "description": "A list of subscibers"
          }
        }
      }
    },
    "register_subscriber": {
      "post": {
        "summary": "Register Subscriber",
        "description": "Registers a subscriber.",
        "parameters": {
          "imsi": {
            "description": "IMSI of the target subscriber."
          },
          "subscriber": {
            "description": "subscriber"
          }
        },
        "responses": {
          "status201": {
            "description": "Subscriber registration complete."
          }
        }
      }
    },
    "get_subscriber": {
      "get": {
        "summary": "Get Subscriber",
        "description": "Returns information about the specified subscriber.",
        "parameters": {
          "imsi": {
            "description": "IMSI of the target subscriber."
          }
        },
        "responses": {
          "status200": {
            "description": "The subscriber's detailed information."
          },
          "status404": {
            "description": "The specified subscriber does not exist."
          }
        }
      }
    },
    "update_speedclass": {
      "post": {
        "summary": "Update Subscriber speed class",
        "description": "Changes the speed class of the specified subscriber.",
        "parameters": {
          "imsi": {
            "description": "IMSI of the target subscriber."
          }
        },
        "responses": {
          "status200": {
            "description": "The subscriber's detailed information after the update."
          },
          "status404": {
            "description": "The specified subscriber does not exist."
          }
        }
      }
    },
    "activate_subscriber": {
      "post": {
        "summary": "Activate Subscriber",
        "description": "Activates status of specified subscriber.",
        "parameters": {
          "imsi": {
            "description": "IMSI of the target subscriber."
          }
        },
        "responses": {
          "status200": {
            "description": "The subscriber's detailed information after the update."
          },
          "status404": {
            "description": "The specified subscriber does not exist."
          }
        }
      }
    },
    "deactivate_subscriber": {
      "post": {
        "summary": "Deactivate Subscriber",
        "description": "Deactivates specified subscriber.",
        "parameters": {
          "imsi": {
            "description": "IMSI of the target subscriber."
          }
        },
        "responses": {
          "status200": {
            "description": "The subscriber's detailed information after the update."
          },
          "status404": {
            "description": "The specified subscriber does not exist."
          }
        }
      }
    },
    "terminate_subscriber": {
      "post": {
        "summary": "Terminate Subscriber",
        "description": "Terminates the specified subscriber",
        "parameters": {
          "imsi": {
            "description": "IMSI of the target subscriber."
          }
        },
        "responses": {
          "status200": {
            "description": "The subscriber's detailed information after the update."
          },
          "status404": {
            "description": "The specified subscriber does not exist."
          }
        }
      }
    },
    "enable_termination": {
      "post": {
        "summary": "Enable Termination of Subscriber",
        "description": "Enables termination of specified subscriber.",
        "parameters": {
          "imsi": {
            "description": "IMSI of the target subscriber."
          }
        },
        "responses": {
          "status200": {
            "description": "The subscriber's detailed information after the update."
          },
          "status404": {
            "description": "The specified subscriber does not exist."
          }
        }
      }
    },
    "disable_termination": {
      "post": {
        "summary": "Disable Termination of Subscriber",
        "description": "Disables termination of specified subscriber.",
        "parameters": {
          "imsi": {
            "description": "IMSI of the target subscriber."
          }
        },
        "responses": {
          "status200": {
            "description": "The subscriber's detailed information after the update."
          },
          "status404": {
            "description": "The specified subscriber does not exist."
          }
        }
      }
    },
    "set_expirytime": {
      "post": {
        "summary": "Update Expiry Time of Subscriber",
        "description": "Updates expiry time of specified subscriber.",
        "parameters": {
          "imsi": {
            "description": "IMSI of the target subscriber."
          },
          "request": {
            "description": "Expiry time after the update (unixtime: in milliseconds)."
          }
        },
        "responses": {
          "status200": {
            "description": "The subscriber's detailed information after the update."
          },
          "status404": {
            "description": "The specified subscriber does not exist."
          }
        }
      }
    },
    "unset_expirytime": {
      "post": {
        "summary": "Delete Expiry Time of Subscriber",
        "description": "Deletes expiry time of specified subscriber and changes it to indefinite.",
        "parameters": {
          "imsi": {
            "description": "IMSI of the target subscriber."
          }
        },
        "responses": {
          "status204": {
            "description": "Change of specified subscriber's expiry time to indefinite complete."
          },
          "status404": {
            "description": "The specified subscriber does not exist or the subscriber does not have an expiry time."
          }
        }
      }
    },
    "set_group": {
      "post": {
        "summary": "Set Group to Subscriber",
        "description": "Sets or overwrites a group for the specified subscriber.",
        "parameters": {
          "imsi": {
            "description": "IMSI of the target subscriber."
          },
          "group": {
            "description": "Group (may include ID only)."
          }
        },
        "responses": {
          "status200": {
            "description": "The subscriber's detailed information after the update."
          },
          "status404": {
            "description": "The specified subscriber does not exist."
          }
        }
      }
    },
    "unset_group": {
      "post": {
        "summary": "Unset Group to Subscriber",
        "description": "Removes the group configuration from the specified subscriber.",
        "parameters": {
          "imsi": {
            "description": "IMSI of the target subscriber."
          }
        },
        "responses": {
          "status200": {
            "description": "The subscriber's detailed information after the update."
          },
          "status404": {
            "description": "The specified subscriber does not exist or the subscriber does not belong to a group."
          }
        }
      }
    },
    "list_session_events": {
      "get": {
        "summary": "List Session Events",
        "description": "Returns the event history for the specified subscriber, including session creation, change, and deletion. If the total number of events does not fit in one page, a URL for accessing the next page is returned in the `Link` header of the response.",
        "parameters": {
          "imsi": {
            "description": "IMSI of the target subscriber."
          },
          "from": {
            "description": "Start time for the events search range."
          },
          "to": {
            "description": "End time for the events search range."
          },
          "limit": {
            "description": "Maximum number of events to retrieve."
          },
          "last_evaluated_key": {
            "description": "The time stamp of the last event retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next event onward."
          }
        },
        "responses": {
          "status200": {
            "description": "A list of session events"
          }
        }
      }
    },
    "put_subscriber_tags": {
      "put": {
        "summary": "Bulk Insert or Update Subscriber Tags",
        "description": "Inserts/updates tags for the specified subscriber.",
        "parameters": {
          "imsi": {
            "description": "IMSI of the target subscriber."
          },
          "tags": {
            "description": "Array of tags to be inserted/updated."
          }
        },
        "responses": {
          "status200": {
            "description": "The subscriber's detailed information after the update."
          },
          "status404": {
            "description": "The specified subscriber does not exist."
          }
        }
      }
    },
    "delete_subscriber_tag": {
      "delete": {
        "summary": "Delete Subscriber Tag",
        "description": "Deletes a tag from the specified subscriber.",
        "parameters": {
          "imsi": {
            "description": "IMSI of the target subscriber."
          },
          "tag_name": {
            "description": "Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)"
          }
        },
        "responses": {
          "status204": {
            "description": "Deletion of specified tag complete."
          },
          "status404": {
            "description": "The specified subscriber or the tag does not exist."
          }
        }
      }
    },
    "issue_subscriber_transfer_token": {
      "post": {
        "summary": "Issue Subscribers Transfer Token",
        "description": "Sends the subscriber's inter-operator control transfer token to the control destination operator.",
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "verify_subscriber_transfer_token": {
      "post": {
        "summary": "Verify Subscriber Transfer Token",
        "description": "Verifies the subscriber's control transfer token, and executes the transfer. This API is called from the operator of the control destination.",
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "delete_subscriber_transfer_token": {
      "delete": {
        "summary": "Delete Subscribers Transfer Token",
        "description": "Deletes the subscriber's inter-operator control transfer token, and cancels the control transfer.",
        "parameters": {
          "token": {
            "description": "token"
          }
        },
        "responses": {
          "status204": {
            "description": "Deletion implemented."
          },
          "status404": {
            "description": "The token does not exist."
          }
        }
      }
    },
    "cli": {
      "summary": "Manage subscribers.",
      "description": "Manage subscribers."
    }
  },
  "bills": {
    "get_billing_history": {
      "get": {
        "summary": "Get billing history",
        "description": "Returns past billing history (after applied discounts such as free tiers, etc., inclusive of tax). This API only returns the billing amounts that have been finalized at the end of the month.",
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "get_latest_billing": {
      "get": {
        "summary": "Get latest bill",
        "description": "Returns the latest billing amounts after applied discounts such as free tiers, etc. The amounts retrieved using this API correspond to the values before the invoice was finalized.",
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "export_latest_billing": {
      "post": {
        "summary": "Output latest billing CSV file to S3",
        "description": "Returns detailed information of the billing amounts for the latest month. This detailed information includes billing amounts per day, subscriber, and billing item. The amounts retrieved using this API correspond to the values before the invoice was finalized.",
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "get_billing": {
      "get": {
        "summary": "Get bill",
        "description": "Returns the billing history for the specified month (after applied discounts such as free tiers, etc., inclusive of tax). The amounts retrieved using this API correspond to the values before the invoice was finalized.",
        "parameters": {
          "yyyyMM": {
            "description": "year and month"
          }
        },
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "get_billing_per_day": {
      "get": {
        "summary": "Get bill per day",
        "description": "Returns detailed information of billing amounts per day for the specified month. This API only returns the billing amounts that have been finalized.",
        "parameters": {
          "yyyyMM": {
            "description": "year and month"
          }
        },
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "export_billing": {
      "post": {
        "summary": "Output billing CSV file to S3",
        "description": "Returns detailed information for the billing amounts for the specified month. This detailed information includes billing amounts per day, subscriber, and billing item.",
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "cli": {
      "summary": "Show or export billing info.",
      "description": "Show billing info for specified period, or export the billing info to a file"
    }
  },
  "payment": {
    "list_coupons": {
      "get": {
        "summary": "List coupons",
        "description": "Returns a list of currently registered coupons.",
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "register_coupon": {
      "post": {
        "summary": "Register Coupon",
        "description": "Registers a coupon.",
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "get_payment_transaction": {
      "get": {
        "summary": "Get payment transaction result",
        "description": "Returns result of a payment transaction.",
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "get_payment_method": {
      "get": {
        "summary": "Get payment method information",
        "description": "Returns current payment methods. Detailed information is included in the properties.",
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "activate_payment_method": {
      "post": {
        "summary": "Activate payment method",
        "description": "Activates a current payment method that has an error.",
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "register_webpay_payment_method": {
      "post": {
        "summary": "Register credit card information for WebPay",
        "description": "Registers credit card information for WebPay payments.",
        "parameters": {
          "creditCard": {
            "description": "creditCard"
          }
        },
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "payment_history": {
    "cli": {
      "summary": "List payment history.",
      "description": "List payment history."
    }
  },
  "payment_methods": {
    "cli": {
      "summary": "Create or update payment methods.",
      "description": "Create or update payment methods."
    },
    "webpay": {
      "cli": {
        "summary": "Create or update WebPay payment method.",
        "description": "Create or update WebPay payment method."
      }
    }
  },
  "event_handlers": {
    "list_event_handlers": {
      "get": {
        "summary": "List Event Handlers",
        "description": "Returns a list of event handlers.",
        "parameters": {
          "target": {
            "description": "target"
          }
        },
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "create_event_handler": {
      "post": {
        "summary": "Create Event Handler",
        "description": "Creates a new event handler.",
        "parameters": {
          "req": {
            "description": "req"
          }
        },
        "responses": {
          "status201": {
            "description": "Created"
          }
        }
      }
    },
    "list_event_handlers_by_subscriber": {
      "get": {
        "summary": "List Event Handlers related to Subscriber",
        "description": "Returns a list of event handlers related to the specified IMSI.",
        "parameters": {
          "imsi": {
            "description": "imsi"
          }
        },
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "get_event_handler": {
      "get": {
        "summary": "Get Event Handler",
        "description": "Returns information about the specified event handler.",
        "parameters": {
          "handler_id": {
            "description": "handler ID"
          }
        },
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "update_event_handler": {
      "put": {
        "summary": "Update Event Handler",
        "description": "Updates the specified event handler.",
        "parameters": {
          "handler_id": {
            "description": "handler ID"
          }
        },
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "delete_event_handler": {
      "delete": {
        "summary": "Delete Event Handler",
        "description": "Deletes the specified event handler.",
        "parameters": {
          "handler_id": {
            "description": "handler ID"
          }
        },
        "responses": {
          "status204": {
            "description": "OK"
          },
          "status404": {
            "description": "EventHandler not found."
          }
        }
      }
    },
    "set_ignore_event_handler": {
      "post": {
        "summary": "Ignore Event Handler",
        "description": "Adds a setting for ignoring the specified event handler of the specified IMSI."
      }
    },
    "delete_ignore_event_handler": {
      "delete": {
        "summary": "Delete Ignore Event Handler",
        "description": "Deletes the setting for ignoring the specified event handler of the specified IMSI."
      }
    },
    "cli": {
      "summary": "List, create, update or delete event handlers.",
      "description": "List, create, update or delete event handlers."
    }
  },
  "orders": {
    "list_orders": {
      "get": {
        "summary": "List confirmed orders.",
        "description": "Returns a list of confirmed orders.",
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "create_quotation": {
      "post": {
        "summary": "Create Quotation",
        "description": "Creates a new order quotation. If the orderId is put in /confirm, the order is complete.",
        "parameters": {
          "request": {
            "description": "request"
          }
        },
        "responses": {
          "status200": {
            "description": "OK"
          },
          "status201": {
            "description": "Created"
          }
        }
      }
    },
    "get_order": {
      "get": {
        "summary": "Get confirmed order.",
        "description": "Returns a confirmed order.",
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "cancel_order": {
      "put": {
        "summary": "Cancel order.",
        "description": "Cancels an order. If the order has already been dispatched, an error is returned.",
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "confirm_order": {
      "put": {
        "summary": "Confirm order.",
        "description": "Performs a credit limit and confirms the order if no problems are encountered.",
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "register_ordered_sim": {
      "post": {
        "summary": "Register subscribers for operator.",
        "description": "Registers the ordered SIM with the operator.",
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "list_ordered_subscriber": {
      "get": {
        "summary": "List ordered subscribers.",
        "description": "List ordered subscribers",
        "request": {
          "limit": {
            "description": "Max number of subscribers in a response"
          },
          "last_evaluated_key": {
            "description": "Serial number of the last subscriber in the previous page that is set to response header with X-Soracom-Next-Key"
          }
        },
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "list_products": {
      "get": {
        "summary": "List products",
        "description": "Returns a list of products.",
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "cli": {
      "summary": "List, create or cancel orders.",
      "description": "List, create or cancel orders."
    }
  },
  "stats": {
    "get_air_stats": {
      "get": {
        "summary": "Get Air Usage Report of Subscriber",
        "description": "Retrieves the usage report for the subscriber specified by the IMSI.",
        "parameters": {
          "imsi": {
            "description": "imsi"
          },
          "from": {
            "description": "Start time in unixtime for the aggregate data."
          },
          "to": {
            "description": "End time in unixtime for the aggregate data."
          },
          "period": {
            "description": "Units of aggregate data. For minutes, the interval is every 5 minutes."
          }
        },
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "get_beam_stats": {
      "get": {
        "summary": "Get Beam Usage Report of Subscriber",
        "description": "Retrieves the Soracom Beam usage report for the subscriber specified by the IMSI.",
        "parameters": {
          "imsi": {
            "description": "imsi"
          },
          "from": {
            "description": "Start time in unixtime for the aggregate data."
          },
          "to": {
            "description": "End time in unixtime for the aggregate data."
          },
          "period": {
            "description": "Units of aggregate data. For minutes, the interval is every 5 minutes."
          }
        },
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "export_air_stats": {
      "post": {
        "summary": "Export Air Usage Report of All Subscribers",
        "description": "Retrieves a file containing the usage report of all subscribers for the specified operator. The report data range is specified with from, to in unixtime. The report contains monthly data. The file output destination is AWS S3. The file output format is CSV.",
        "parameters": {
          "operator_id": {
            "description": "operator ID"
          },
          "request": {
            "description": "request"
          }
        },
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "export_beam_stats": {
      "post": {
        "summary": "Export Beam Usage Report of All Subscribers",
        "description": "Retrieves a file containing the usage report of all subscribers for the specified operator. The report data range is specified with from, to in unixtime. The report contains monthly data. The file output destination is AWS S3. The file output format is CSV.",
        "parameters": {
          "operator_id": {
            "description": "operator ID"
          },
          "request": {
            "description": "request"
          }
        },
        "responses": {
          "status200": {
            "description": "OK"
          }
        }
      }
    },
    "cli": {
      "summary": "Show or export statistics.",
      "description": "Show or export statistics."
    },
    "air": {
      "cli": {
        "summary": "Show or export Air statistics.",
        "description": "Show or export Air statistics."
      }
    },
    "beam": {
      "cli": {
        "summary": "Show or export Beam statistics.",
        "description": "Show or export Beam statistics."
      }
    }
  },
  "groups": {
    "list_groups": {
      "get": {
        "summary": "List Groups",
        "description": "Returns a list of groups.",
        "parameters": {
          "tag_name": {
            "description": "Tag name of the group. Filters through all groups that exactly match the tag name. When tag_name is specified, tag_value is required."
          },
          "tag_value": {
            "description": "Tag value of the groups."
          },
          "tag_value_match_mode": {
            "description": "Tag match mode."
          },
          "limit": {
            "description": "Maximum number of results per response page."
          },
          "last_evaluated_key": {
            "description": "The last Group ID retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next group onward."
          }
        },
        "responses": {
          "status200": {
            "description": "A list of groups."
          }
        }
      }
    },
    "create_group": {
      "post": {
        "summary": "Create Group",
        "description": "Create a new group.",
        "parameters": {
          "group": {
            "description": "Group to be created."
          }
        },
        "responses": {
          "status201": {
            "description": "Created"
          }
        }
      }
    },
    "get_group": {
      "get": {
        "summary": "Get Group",
        "description": "Returns the group specified by the group ID.",
        "parameters": {
          "group_id": {
            "description": "Target group ID."
          }
        },
        "responses": {
          "status200": {
            "description": "The specified group"
          },
          "status404": {
            "description": "The specified group does not exist."
          }
        }
      }
    },
    "delete_group": {
      "delete": {
        "summary": "Delete Group",
        "description": "Deletes the specified group by group ID",
        "parameters": {
          "group_id": {
            "description": "Target group ID."
          }
        },
        "responses": {
          "status204": {
            "description": "Deletion of specified group complete."
          },
          "status404": {
            "description": "The specified group does not exist."
          }
        }
      }
    },
    "list_subscribers_in_group": {
      "get": {
        "summary": "List Subscribers in a group",
        "description": "Returns a list of subscribers that belong to the specified group by group ID.",
        "parameters": {
          "group_id": {
            "description": "Target group ID."
          },
          "limit": {
            "description": "Maximum number of results per response page."
          },
          "last_evaluated_key": {
            "description": "The IMSI of the last subscriber retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next subscriber onward."
          }
        },
        "responses": {
          "status200": {
            "description": "Target group ID"
          },
          "status404": {
            "description": "The specified group does not exist."
          }
        }
      }
    },
    "put_configuration_parameters": {
      "put": {
        "summary": "Update Group Configuration Parameters",
        "description": "Adds/updates parameters for the specified group.",
        "parameters": {
          "group_id": {
            "description": "Target group."
          },
          "namespace": {
            "description": "Target configuration."
          },
          "parameters": {
            "description": "Array of values for target object to be updated."
          }
        },
        "responses": {
          "status200": {
            "description": "The group after the update."
          },
          "status404": {
            "description": "The specified group does not exist."
          }
        }
      }
    },
    "delete_configuration_parameter": {
      "delete": {
        "summary": "Delete Group Configuration Parameters",
        "description": "Delete parameters for the specified group.",
        "parameters": {
          "group_id": {
            "description": "Target group."
          },
          "namespace": {
            "description": "Namespace of target parameters."
          },
          "name": {
            "description": "Parameter name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)"
          }
        },
        "responses": {
          "status200": {
            "description": "The group after the update."
          },
          "status404": {
            "description": "The specified group does not exist."
          }
        }
      }
    },
    "put_group_tags": {
      "put": {
        "summary": "Update Group Tags",
        "description": "Adds/updates tags of specified configuration group.",
        "parameters": {
          "group_id": {
            "description": "Target group ID."
          },
          "tags": {
            "description": "Array of values for tags to be updated."
          }
        },
        "responses": {
          "status200": {
            "description": "The subscriber's detailed information after the update."
          },
          "status404": {
            "description": "The specified subscriber does not exist."
          }
        }
      }
    },
    "delete_group_tag": {
      "delete": {
        "summary": "Delete Group Tag",
        "description": "Deletes tag from the specified group.",
        "parameters": {
          "group_id": {
            "description": "Target group ID."
          },
          "tag_name": {
            "description": "Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)"
          }
        },
        "responses": {
          "status204": {
            "description": "Tag deletion complete."
          },
          "status404": {
            "description": "The specified subscriber or the tag does not exist."
          }
        }
      }
    },
    "cli": {
      "summary": "List, create, update or delete groups.",
      "description": "List, create, update or delete groups."
    }
  },
  "virtual_private_gateway": {
    "list_virtual_private_gateways": {
      "get": {
        "summary": "List Virtual Private Gateways",
        "description": "Returns a list of VPGs.",
        "parameters": {
          "tag_name": {
            "description": "Tag name of the VPG. Filters through all VPGs that exactly match the tag name. When tag_name is specified, tag_value is required."
          },
          "tag_value": {
            "description": "Tag value of the VPGs."
          },
          "tag_value_match_mode": {
            "description": "Tag match mode."
          },
          "limit": {
            "description": "Maximum number of results per response page."
          },
          "last_evaluated_key": {
            "description": "The last group ID retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next VPG onward."
          }
        },
        "responses": {
          "status200": {
            "description": "List of VPGs."
          }
        }
      }
    },
    "create_virtual_private_gateway": {
      "post": {
        "summary": "Create Virtual Private Gateway",
        "description": "Create new VPG.",
        "parameters": {
          "create_virtual_private_gateway_request": {
            "description": "Request containing information for the new VPG to be created."
          }
        },
        "responses": {
          "status201": {
            "description": "Created"
          }
        }
      }
    },
    "get_virtual_private_gateway": {
      "get": {
        "summary": "Get Virtual Private Gateway",
        "description": "Retrieves information about the specified VPG.",
        "parameters": {
          "vpg_id": {
            "description": "Target VPG ID."
          }
        },
        "responses": {
          "status200": {
            "description": "The specified VPG."
          },
          "status404": {
            "description": "The specified VPG does not exist."
          }
        }
      }
    },
    "terminate_virtual_private_gateway": {
      "post": {
        "summary": "Terminate Virtual Private Gateway",
        "description": "Terminates the specified VPG.",
        "parameters": {
          "vpg_id": {
            "description": "Target VPG ID."
          }
        },
        "responses": {
          "status200": {
            "description": "Termination of specified VPG started."
          },
          "status400": {
            "description": "There is a reason why the specified VPG cannot be terminated."
          },
          "status404": {
            "description": "The specified VPG does not exist."
          }
        }
      }
    },
    "create_vpc_peering_connection": {
      "post": {
        "summary": "Create VPC Peering Connection",
        "description": "Creates a VPC peering connection for the specified VPG.",
        "parameters": {
          "vpg_id": {
            "description": "Target VPG ID."
          },
          "vpc_peering_connection": {
            "description": "VPC peering connection to be created."
          }
        },
        "responses": {
          "status201": {
            "description": "The created VPC peering connection."
          },
          "status404": {
            "description": "The specified VPC peering connection does not exist."
          }
        }
      }
    },
    "delete_vpc_peering_connection": {
      "delete": {
        "summary": "Delete VPC Peering Connection",
        "description": "Deletes the specified VPC peering connection.",
        "parameters": {
          "vpg_id": {
            "description": "Target VPG ID."
          },
          "pcx_id": {
            "description": "VPC peering connection ID to be deleted."
          }
        },
        "responses": {
          "status204": {
            "description": "Deletion of specified VPC peering connection complete."
          },
          "status404": {
            "description": "The specified VPC peering connection does not exist."
          }
        }
      }
    },
    "cli": {
      "summary": "List, create, update or delete VPGs.",
      "description": "List, create, update or delete VPGs (Virtual Private Gateways)."
    }
  },
  "completion": {
    "cli": {
      "summary": "Generate script for bash completion"
    }
  },
  "configure": {
    "cli": {
      "summary": "Show, create or update configurations.",
      "description": "Show, create or update configurations.",
      "profile": {
        "prompt": "--- SORACOM CLI setup ---\nThis will create a directory %s if it does not exist yet and place '%s.json' in it.\n\nPlease select which authentication method to use.\n\n1. Input AuthKeyId and AuthKey * Recommended * \n2. Input Operator credentials(Operator Email and Password)\n3. Input SAM credentials(OperatorId, User name and Password)\n\n",
        "select": "select (1-3) > ",
        "overwrite": "Profile %s already exists. Overwrite it? (Y/n) "
      }
    },
    "get": {
      "cli": {
        "summary": "Show specified profile configurations",
        "description": "Show specified profile configurations"
      }
    }
  },
  "coupons": {
    "cli": {
      "summary": "List or register coupons.",
      "description": "List or register coupons."
    }
  },
  "products": {
    "cli": {
      "summary": "List products.",
      "description": "List products."
    }
  },
  "version": {
    "cli": {
      "summary": "Show version info.",
      "description": "Show version info."
    }
  },
  "cli": {
    "common_params": {
      "body": {
        "short_help": "JSON string or @filename for API request body."
      }
    }
  }
}
