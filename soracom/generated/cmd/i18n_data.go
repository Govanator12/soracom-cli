// Code generated by go-bindata.
// sources:
// ../generators/assets/i18n/soracom-api.text.en.json
// ../generators/assets/i18n/soracom-api.text.ja.json
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _GeneratorsAssetsI18nSoracomApiTextEnJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x59\xdf\x6f\xdb\xb8\x0f\x7f\xef\x5f\x41\x04\x18\xda\x0e\x71\xbb\x6e\x7b\xfa\x3e\x7c\xef\x72\xc3\x61\xc8\xed\x47\x83\x75\xdb\xe1\x80\x02\xa9\x62\x2b\x89\x6e\x8e\xe4\x93\xec\x66\xc1\xa1\xff\xfb\x91\xb2\xe5\xc8\x8e\x1d\x3b\x69\x07\xec\xa5\x88\x65\xf1\x43\x8a\xe4\x87\xa4\xdc\x7f\x4f\x00\x06\x2c\x4b\x97\x83\xff\x01\xfd\xc6\xa7\x44\x99\xb4\x7c\xc2\x67\x93\xad\x56\x4c\x6f\x70\x69\x30\xe1\x7a\xae\xf4\xca\x00\x49\x70\x99\x8a\x90\xa5\x42\x49\x48\x15\xb0\x30\xe4\xc6\xd0\x2f\x7c\x03\x37\xd7\x9f\x46\x6f\xae\x3f\xc0\x68\x32\xbe\x18\x0c\x1d\x52\xc4\x4d\xa8\x45\x42\x22\x47\xa3\xc1\x67\x05\x49\x2e\x58\x97\x9b\x6d\x80\x81\x56\x2a\x25\x71\x95\xc9\x74\x08\x26\xe1\xa1\x98\x6f\xe0\x8e\xaf\x98\x88\xef\x80\xc9\x08\xee\x12\x66\xcc\x5a\xe9\xe8\xae\x0b\x4c\xc2\x08\x17\xdf\xf1\x8d\x07\xc4\xf2\x95\x71\x54\x80\x15\xcf\x9d\x58\x70\x33\xfa\x00\x99\xe1\xda\xc3\x52\xb8\x9f\xa5\x4a\x23\xd8\x10\xee\xe8\xe5\x47\xb6\xe2\xbb\x56\x8e\x24\x1d\x1d\x50\x8d\x7d\xc5\xf2\xc7\xcf\xea\x1b\x97\xb0\x16\x71\x0c\x33\x0e\x42\x86\x71\x16\xf1\x08\x7f\x58\x9f\x69\x6e\x12\x25\x0d\xbe\x98\x83\xc9\xac\x3b\xe7\x59\x7c\x01\x37\x85\x72\xda\xe3\x83\xba\xe7\x1c\x15\x1d\xaf\xf9\x3f\x19\x37\x29\x46\x67\x9e\x72\xbd\x66\x3a\x32\xdb\x48\x26\x4c\xa3\xa5\xb8\x6e\xbc\x4c\xc1\xf5\x99\x8a\x36\x95\x95\xdd\xa8\x8f\xaa\xbe\x29\xd4\x0c\x4a\x89\x87\xe2\xd7\x43\xa9\xcc\x1d\xa5\xa6\xcb\xa4\x2c\xcd\xcc\xcb\x17\x2f\x0e\x53\xb8\x75\x86\xa7\x73\x58\x87\x7d\xfd\xe2\xaa\x03\xf6\x8b\x64\xb3\x98\xdb\x64\xdd\x2a\xe0\xfb\xce\x11\xc6\xa2\x76\x82\x6e\x66\x51\x68\x84\x31\x19\x77\x51\x6f\x4c\x82\x6a\x8c\x07\xde\x69\x9e\x82\x72\xb7\xf2\x38\xce\x05\x81\xcf\xba\x20\xd8\x66\x74\x17\x62\x13\xf1\x82\x80\x36\x06\xdf\xf8\x26\x10\x51\x89\xe9\xd6\xba\x31\x9b\x08\x18\x04\x8e\x82\x84\x39\xa4\x05\xda\x11\xc8\x2d\x0d\x7d\xb3\x7b\x11\xd1\x2c\xd5\x7a\x27\x22\x27\x7e\x4e\x14\x19\x31\xb0\x71\x9d\x3a\xf8\x29\xa6\x39\x4f\xa7\x29\x81\xf9\xe5\xb7\x56\x8e\xab\x69\x33\x26\x08\x8c\x26\x38\x14\xb0\x28\x60\x51\x00\x5d\x61\x83\xe9\x0e\xb9\x2f\x33\xde\x72\x49\x9b\xda\xc1\xe8\xc0\x86\x53\x3a\xa6\x2e\x49\x1c\xee\xa9\x01\x0a\x34\xb0\x28\x42\x09\x83\x7e\xa2\x92\x81\xd2\x21\x17\xf7\x42\x2e\xec\xe6\x26\xd0\x21\x84\x0c\xbd\x76\x79\x7f\x75\x49\x11\xbb\x6c\xf2\xc5\xe5\x3d\xd7\x14\x2c\xf2\xf4\x5a\xa4\x4b\x0b\x96\xba\x2a\x95\x25\x11\x1a\xed\x5b\xe2\x30\x2a\x87\x6d\x2e\x21\x7b\x8a\xc8\xae\x83\xae\xdf\x0d\xbc\xf7\x5e\xc5\xf0\x6a\x46\x37\xca\x58\xde\xb3\x58\x44\xc0\x2b\x0e\xab\x20\x37\x56\xa5\x7a\xed\x78\xaa\x34\xf8\x69\x12\x41\x67\x12\x4e\x8d\xd2\x2c\x54\x39\x7d\x21\x8f\x7b\x49\xbf\xc0\x6e\x0f\xec\xf6\xd3\x03\x33\x61\xb7\x28\x57\x88\x98\x6b\x7a\x1c\x13\xbf\x12\x86\x40\xaf\xb5\x1d\xd1\xfa\x2d\x37\xb2\x25\x49\xeb\x0d\xa6\xd8\x5b\x73\x70\x89\x8d\x25\xa6\x55\x97\x30\xb9\xfb\x04\xff\xc9\x79\x60\xcd\xbd\xe8\x46\x7c\xdd\x89\x98\x57\x61\xfe\x3d\x11\x9a\x47\x8f\x66\xd4\xe3\xc3\xf9\x03\x03\xda\x96\xce\x27\xc5\x09\x07\x33\xec\x45\xdb\x10\xd7\x8e\xea\x1f\xf3\x06\x9b\x15\x60\x79\x40\xb7\x29\x9d\x02\xc9\x11\x4d\x85\x9c\xab\xf6\xb9\xdd\x0a\xf9\x5b\x6d\x85\xc9\x9b\x2a\xda\x47\x4d\x58\xa8\x68\xe8\xe1\xd2\xb1\x2a\x02\x34\x6f\xc0\x5c\xc4\xc5\xbc\xb4\xb5\x1c\xd9\x9f\xc4\xbc\xd0\xd4\x69\xbe\xab\x55\x90\xdb\x67\xed\x98\x31\xb3\x04\x0f\x66\x47\x81\x9c\x8b\x45\xa6\x79\x5f\xf7\x60\x8f\xd2\xdc\x56\x16\xed\x6a\x8c\xc3\xb0\xc3\x85\xd9\xef\xa8\x43\xc4\x13\xad\xac\x4f\x2a\x35\x06\x17\x57\x09\xd5\x9d\x41\x10\x04\xe5\x5c\xf6\xe6\xfd\x18\x8b\x70\x9a\x25\x80\xab\x38\xfa\x2c\x31\x41\xec\x04\x52\x68\x63\x10\x21\x0f\x42\xcc\xb0\x0d\x3c\x33\x94\x5a\x58\xad\x23\x85\xd9\x27\x71\x56\xe3\xdf\x85\x49\x61\x83\xd9\x45\x59\x9c\xc4\x2c\xe4\x70\xfa\xcc\x5c\xfc\x6d\x14\xd6\x56\xbc\x41\x88\x14\xe7\xa9\x5b\x39\x89\x39\xc3\x2b\x84\xe1\x31\x42\xc1\x7a\x29\xc2\x65\x7d\xb4\xc2\x5b\xc0\x52\x45\xb6\x00\x1b\x6e\x85\xae\x2e\x60\x2c\x93\x2c\x75\x33\xdc\x38\xb2\x5a\x8a\x27\x78\x0e\x9f\x38\x86\x67\x85\x1d\x04\x73\xe5\x39\xdc\xca\x97\x4e\xe0\xba\x20\x05\x1d\x22\x22\x1d\x2c\x36\x67\xe5\xe2\xef\x79\x6b\x41\xa8\x49\xc1\x90\xf3\x5b\xf9\xca\xc9\xd2\x74\xd7\x24\x36\xc6\x44\xfc\x82\x33\x1d\xd0\x4c\x57\x97\xbe\x95\x7e\x71\xcc\x8f\x49\x9e\x2e\x0e\x7c\x76\x15\xbc\x3a\x87\xff\x83\xbf\x49\x21\x0d\xd7\x5a\xa4\xdc\x8e\xd3\x79\xc0\xc8\xc3\x2c\x46\xc7\x47\x9b\xdc\xb5\xd8\xf9\xae\xdd\x3e\xf4\xe5\x2f\x70\xf6\xd7\xa5\x3c\x87\xe6\x31\x70\xc1\x2b\xd7\xed\x7d\xb7\x04\xcb\x3c\x8f\x68\x85\xfa\x6a\x42\xed\x69\x29\xfd\xe4\x5b\x8a\x0a\x8e\xf7\xd4\x3b\xfa\xf0\xe6\x3d\xa5\x97\xa2\xc6\xbf\xc0\x5f\xe8\xfc\x42\xb6\x9d\x2a\xed\x12\x75\x2b\xb6\x31\xee\x6b\x89\xa3\xe0\xb0\x9c\x11\x34\x44\x18\x61\xa2\xe2\x16\x8d\xe8\xd4\x61\xe0\x41\x40\x35\xbb\xf9\x3d\xbe\x9e\x2e\x31\x01\x63\xff\xd6\x7c\xbc\xe9\x16\x10\x1c\xe0\xd1\x86\xd7\x61\x6a\x66\x2f\x34\xc6\xe1\x29\xcc\xcd\x81\x8e\x36\xd3\x89\xd7\xcc\x73\x6d\xb4\x8f\x81\x1f\x98\x64\x8b\x6d\xe7\xdd\x63\xcb\xee\xce\x0a\x61\xa9\x02\x4e\xf1\xce\x69\xfa\xd2\xd6\x3f\x9b\x77\x26\x6f\x06\x28\x8a\xa3\xd9\x37\x0f\x1e\x82\xd2\x42\x61\xac\x7a\x47\x24\x1f\x29\x0b\x99\x0c\x79\x0c\x39\x40\xbf\x28\x36\x88\xd5\xcc\x49\xd8\x66\x65\x59\x81\x52\x4a\x6f\x7a\x57\x96\x42\x0e\x0a\xb9\x8e\xaa\xb2\xb3\xbb\xc5\x8a\xbc\x93\xf5\xf2\xce\x9b\x7a\x4b\x77\x3a\x0a\x8c\x76\x8b\xba\x25\x2b\xa9\xb6\xe6\x33\xdc\xd0\x37\xcf\x76\xc0\xff\xe4\xb3\x09\xdb\xd4\x74\xec\xcb\xb1\xbe\x08\x2d\xf9\x85\x0d\x25\xca\xc2\xb4\x7f\x8f\x70\x02\x5d\x21\x2c\xb7\xd5\x14\x6a\x15\xf3\xa7\xa8\x4e\x16\xe7\xe8\xe2\x54\x48\xd7\x6c\x33\x4b\x91\x24\x38\xf1\x4e\x8b\xdb\xf0\x93\x18\xea\x40\xa1\x04\x3d\xda\xea\x26\xa8\xfa\x11\xf0\xf6\x75\xcc\x3d\x82\xe4\x50\xb9\x08\x3b\x86\xe3\x16\x91\x6a\xb5\x15\xfa\xa0\xf1\x68\x0b\x39\x12\xba\xd1\x92\x4e\x5b\xea\x82\x8d\x63\xdb\x8c\xb3\xd5\x91\x86\xfd\x86\xa2\xc7\x59\xb6\x23\xd9\x42\x44\x93\xcd\x08\x66\xd6\xb3\xda\x17\x0d\xcf\x93\xea\x6c\x8e\x95\xbd\x35\xed\xf4\x0d\xf5\x10\xbd\xee\xcb\xec\x1e\xad\x3f\xa6\x03\x3b\xc5\x8f\xeb\xc0\x8d\x28\x8d\x39\xe3\xae\xf6\x87\x15\xf4\x06\xee\x7a\x2a\xfb\x7c\x4a\x3a\x0c\xa7\xd9\x74\xae\x57\xc2\x18\xe1\xdf\x00\x7a\x64\x7d\xe9\xae\xed\xe7\x92\x8a\xd2\x12\xb5\x8b\x04\x07\x00\xb5\x70\x02\x2f\x64\xa6\xe7\x77\x05\xcb\xba\x62\x7f\x9f\x8f\x21\xd5\xad\xf5\x1b\x8b\xa7\x86\xbe\x6f\xac\x94\x9c\xda\xff\x9f\x55\x1c\xb9\xf3\x9f\x33\xec\x1f\xc8\xf8\xe9\x92\xc7\x09\xe9\xf9\xe3\xe6\xfa\x23\x32\x5f\x53\xc1\xc6\xf8\xfd\x4a\x17\x37\x7b\xa5\xa5\x6f\x1e\xf4\x6d\xbc\xf8\x47\x1a\x10\x50\xbb\x0f\x92\xc5\x13\x34\xa1\xaf\x93\xb7\x06\x8e\xee\x3b\x56\xfa\xec\xab\xd0\x69\xc6\x62\x98\x68\x71\x4f\xef\xdf\xe2\x9f\x35\xdb\x98\x73\xdf\x7f\x27\x0f\x27\xff\x05\x00\x00\xff\xff\x21\xc0\x1f\x8c\xa1\x1e\x00\x00")

func GeneratorsAssetsI18nSoracomApiTextEnJsonBytes() ([]byte, error) {
	return bindataRead(
		_GeneratorsAssetsI18nSoracomApiTextEnJson,
		"../generators/assets/i18n/soracom-api.text.en.json",
	)
}

func GeneratorsAssetsI18nSoracomApiTextEnJson() (*asset, error) {
	bytes, err := GeneratorsAssetsI18nSoracomApiTextEnJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../generators/assets/i18n/soracom-api.text.en.json", size: 7841, mode: os.FileMode(420), modTime: time.Unix(1459935129, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _GeneratorsAssetsI18nSoracomApiTextJaJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x5a\x5f\x4f\xdb\x58\x16\x7f\xe7\x53\x5c\x45\x1a\x0d\x95\x08\xb4\x33\xf3\xb4\x0f\xab\x65\x66\xa5\x11\x3b\xd3\x69\xb5\x95\x66\xb5\x12\x12\x32\xe4\x16\xbc\x4d\xec\xc8\x76\xa8\xa2\x55\x25\x6c\xb7\x0b\x65\xc3\x94\xd2\x16\xc8\x94\x19\xfa\x17\x32\x64\x08\xed\xd0\xd9\x49\x81\x2d\x1f\xe6\x62\x13\x9e\xfa\x15\xf6\xdc\x6b\x3b\xfe\x97\x90\xeb\x04\xaa\x5d\xed\x0b\xd8\xce\xbd\xe7\xff\xf9\x9d\x73\x8f\xfd\xf7\x3e\x84\x52\x42\x41\x9b\x4a\xfd\x0e\xd1\x6b\xb8\xcb\xcb\xaa\xd6\xbc\x83\x7b\xb5\x90\xcb\x09\x4a\x11\x1e\xa5\x86\xaf\x8e\x20\x62\x3c\x23\xc6\x0e\x31\xf6\x89\xf1\x96\xe8\xb5\xc6\xd6\x42\xa3\x72\x40\x8c\xa5\xc6\xd3\x12\xd1\x6f\x93\x19\xdd\x59\xb4\x4d\xcc\x03\xa2\x57\x10\xbb\x33\xe7\xe8\x1d\xec\x32\x77\x61\xe5\x71\x79\x8f\x2d\x5e\x21\xfa\x3b\xa2\x97\xc9\x8c\x91\x1a\xf0\x98\x65\xb0\x3a\xa1\x88\x79\x4d\x94\x25\x4e\x86\x1e\x0d\x62\x56\x29\x13\x60\x45\xd7\x57\x89\xb1\x41\xb9\xc1\xad\xbe\xe9\x6e\x81\x65\xc6\x3f\xad\x27\x6f\xac\x45\x78\xb8\x83\x70\x4e\x10\xb3\x88\xca\x98\x17\x54\xf5\xa6\xac\x64\x40\x78\x8f\xba\x23\xfe\xa6\xcf\x4f\xaf\xf9\x3b\xa9\xbd\xbe\xc2\xc5\x91\x0c\xdb\xed\xde\xc1\xe6\x6b\xc3\x97\x41\xd7\x0d\xa6\xeb\xbf\xe0\x6f\x7c\xab\x9c\xc7\x8a\xa0\xc9\xca\x48\x66\x00\x15\x54\xac\x7c\x23\xe4\xf0\x40\x93\x3f\xa8\xba\x44\xcc\x2d\xa6\x6d\x85\x6a\x4b\xa5\xaf\x5a\x8b\xa0\x8c\x4e\xf4\x0d\xa2\xdf\x23\xfa\x13\xa2\x3f\x62\x76\x36\x3c\xea\x25\x7b\x6e\xd1\x9a\x5f\x67\xf6\x5c\x77\x39\x75\xf4\x82\x5e\x6a\x1c\x3e\xa4\xa4\x8c\x12\x18\x05\x44\xa4\xca\xce\xe8\x47\xfb\x2f\x4f\xca\x0b\x01\xad\x4b\xd6\xe1\x9d\xc6\x06\x70\xdf\x8a\x08\x66\x97\x0d\x90\x0d\x54\x22\xfa\x03\x58\x8f\x3a\x7a\x9d\x98\xab\xc4\x34\x89\x39\xc3\x96\x54\x8f\xf6\x57\x8f\xea\xdf\x31\xa1\x37\xa2\x3a\xbb\xbe\x7d\x1e\xd7\xd9\x0f\x94\xbc\xa0\x80\xed\x34\xac\xa8\x81\x58\x85\xe7\xe3\x72\xa6\x18\x7a\x12\x0f\x2a\x57\xb7\x30\xd3\x54\x73\xc3\x2d\xf7\xea\x56\x93\x97\x82\xd5\xbc\x2c\xa9\x38\xc2\x4a\xd5\x04\xad\xa0\x7e\x72\xf1\x22\x17\x3f\xc7\x4b\x01\x36\x03\x51\x4a\x9f\x5d\xbc\xc4\x45\xc9\x7a\xf1\xda\x7e\xb4\x72\x9a\xc0\x13\x59\x31\x22\xea\x07\xcc\xe1\x9e\xb2\x78\x54\x4a\x9c\xc7\xe9\xb4\x9f\xc9\xe9\x74\x30\x97\xec\xd2\xac\x55\xfb\xde\x8d\xb1\x70\x20\x8d\x4a\xa1\x4c\x07\x85\x1e\x56\x98\x1c\x1b\xed\x98\xd0\x34\x4f\xdf\xc0\xc5\xb4\x98\x71\x59\x79\x4f\x3a\xb2\x8a\xe2\xc2\x29\xaa\x78\x00\x01\x5c\x06\xe0\x96\x62\x44\x5a\x62\x20\x11\x56\xad\x07\x98\x28\xb3\x84\xaf\x84\xbd\x6c\xdc\x6e\x81\x11\x35\xdb\xbc\x63\x3d\x79\x4d\xc1\xe2\x69\xe5\xf8\xc5\x9e\x8b\x17\x4d\x8f\xf7\x05\xe3\xcf\x8d\xbe\x94\xa8\xaa\x05\x3c\xe6\xc9\x3a\x06\xb9\x83\xb5\x31\x4d\xbe\x81\xa5\x60\x51\x89\x14\x99\x70\x88\x12\xf3\x3e\x53\x6b\x87\x05\xc2\x5d\xa6\xeb\x3e\x03\x8f\x39\xe6\xa6\x5a\x2f\xc1\x18\x25\xee\xda\xd2\xa5\xef\x99\x67\x9d\xd9\xb2\xc6\x96\x01\x8b\x43\x62\xbc\x20\xe6\x93\x28\xdf\x87\xeb\x60\x54\xd7\xe9\x33\x3a\x31\x00\x24\xbf\x27\xe6\xcf\x6c\xcd\x21\x73\x34\x50\x78\xca\x18\x55\x69\x38\x53\x5d\x7e\x66\x09\x50\x3d\xa1\x60\xbb\x1a\x94\xd9\x5f\xa9\x57\x1b\x95\xd5\xc6\xc1\x5d\xcf\xde\x1b\xd4\x93\x20\x55\x98\xbb\x75\x6f\xd9\x7a\xb7\x42\x29\xcc\xe8\x43\xd3\x97\x86\x68\x38\x0e\xb5\xb2\xfb\xd0\x34\x56\xc4\xeb\x45\x17\xa2\x97\xac\xfb\x20\xd7\xae\x35\xbb\xe7\x08\x6e\x2f\xbf\x62\x17\xb7\xe3\x86\x69\x54\xb6\xbd\xa0\x6e\x61\xd7\xd6\xa8\x78\x0a\x2e\xc6\x7d\x71\xe5\xab\x54\xe0\xf7\x00\x22\x06\x30\xb1\x33\x95\x36\x26\x2e\xd9\xdb\xcf\x99\xec\x90\x0e\x06\x31\xe6\x99\x12\x8f\x89\xf1\x20\x10\xba\x41\xf8\x0c\x43\x72\x14\x42\xcf\x31\x42\xff\x4f\x62\x54\x95\x15\x61\x42\xce\xb1\x7e\x09\x39\x21\xd9\x84\xb4\x34\x0b\xd7\x34\x0b\x57\x88\x51\xc0\xfb\x1f\x19\xea\x03\xf9\x4d\xbe\x00\x8d\x75\x0a\xf1\xf2\x18\x82\x29\x47\x80\x0f\x8b\x53\xf6\x8b\x35\x06\xc5\xd4\x1a\x71\x65\xec\xc7\x6f\x3c\x55\x93\xa3\x58\x12\xd6\xde\x75\xb5\x45\xe3\xd8\x3a\x3c\x92\x89\xfa\x5f\x03\x0c\x47\xf5\x05\x86\x01\x5b\x91\xd6\xd7\x2b\xd6\xcd\x6a\x46\x0d\x10\x45\x85\x96\x3c\x3f\xe3\x00\xa3\x70\x05\x5d\xbb\x6b\xcd\xbf\xb5\xd7\xd6\x4f\xca\x8b\xb4\x9b\x9e\x9b\xf5\xb3\x25\x5a\x47\x83\xc1\x7a\x9e\x60\xd4\x43\x18\xfe\x0f\x04\x62\xbb\xbc\xef\x73\x4d\x9a\x1a\x17\xb3\x59\x3f\x34\x23\xb6\x0d\xda\xb5\xb1\xf5\xcb\xc9\xec\x7d\x8a\x83\xcb\xcf\x1c\xcc\x75\xfb\x21\x40\xd5\x67\x7b\xd0\x57\xb9\x81\x03\xa5\xc5\x84\x50\x7a\xca\xf0\x17\x90\xb1\x4e\x45\xa5\x9d\xd9\x0e\x93\xf6\x07\xaf\x9d\x8d\xf6\xba\x6d\x4f\xbd\xe7\xce\x38\x62\x11\x40\xe5\x7c\x16\xbb\xdc\x3b\x9a\x65\x5c\x50\xa7\x90\xe3\xdb\xc6\xf3\x35\xab\x56\x42\xfd\x3e\x81\x0b\x88\xb2\xa6\xce\x06\xff\xad\x38\xdc\x03\x25\xa8\xad\x00\xd2\x75\x71\xb2\xa0\x60\x1e\xfe\xc1\xf2\x60\xd5\xd6\x41\xb7\xe3\xa5\x57\xd6\x33\xf3\xfd\xc1\x1c\x63\xb9\x1d\x34\xca\x7b\x5a\xa1\x6a\x6e\x9d\x30\x6e\xbb\x7d\x2c\xbf\x2b\xce\x97\x59\x5e\x91\xaf\x8b\x59\x1c\x2e\x30\xf0\x30\x97\xa7\x45\x27\x95\x4e\xa7\xd1\xb5\x2b\x7f\x1e\xfe\xe2\xca\x65\xf4\xc5\xd7\xb4\x79\xf3\x3a\x00\x5a\xa7\xe1\x62\x05\x4e\x05\xe9\x51\xe9\x23\x15\x1a\x77\x00\x96\xe7\xac\x72\xef\xb0\x8c\xdb\x02\xb4\xa1\xc8\xa7\xdf\x67\x80\xf3\xea\xe8\xdf\x6b\xae\x13\x20\xe9\xf5\x1f\xd8\xa9\xbd\x1a\x14\x1e\x7d\xfc\x91\x3a\xf8\x37\x55\x96\x3e\xa6\x4d\xa2\xbf\xdc\x3f\x99\x79\x67\x26\x7b\xf9\xad\xbd\x0b\x1b\x97\x4e\xf4\xba\x3d\xff\x63\x9b\x43\xcf\xa8\x74\x69\x10\x0d\x87\x26\x25\xee\x1d\x6b\x42\xef\xbc\xb4\xe6\x1f\x3b\xc1\x0d\xb6\xb4\xbf\xab\x58\x2f\x2b\x60\xbf\x51\xe9\x93\x41\x94\xa4\x49\xa9\xc4\x41\x21\x48\x7b\x54\xfa\x74\x10\xc5\xcf\x5f\xee\xf9\xb3\x99\x56\x11\x71\xe2\x02\x8c\xfc\x91\x81\xa5\x4f\xc3\x5a\x5c\x88\xc3\x27\x53\x60\x54\x0a\x16\x43\x15\x67\xf1\x04\xf3\x66\x3b\x6b\xa1\xfe\x4b\xe9\x4f\x2f\xa0\xdf\xa3\xe0\x36\x19\xfa\x93\x9b\x8a\xa8\x61\x07\x63\xa3\x91\x86\xa8\xcb\xe9\xec\xa5\xcc\x86\x54\x55\x6b\x7b\xd5\x5a\xab\x78\xb4\xfd\x50\x3b\xaa\xcf\xdb\x8f\x01\x16\x16\x7c\x4f\xea\xa0\xe0\x3a\xea\xff\xeb\x10\xe4\x6a\xeb\x13\xdc\x24\x0e\xcd\xff\x4e\x1b\x26\xc4\x25\x6b\x9a\xd4\x3b\x32\x72\xb6\x33\x49\xe8\xb4\x01\xf6\x09\xb9\x40\xfb\x0e\x1e\x0c\x39\x2e\xef\x9f\x94\x7e\xb1\xeb\xd0\x4b\x1f\xb2\x8c\x39\x60\x70\xb9\xdb\x02\x61\xa3\x53\x08\x07\x64\xfd\x2d\x0e\xa9\x04\x90\xf2\x21\x78\x47\x2d\xa3\xe0\x0c\x96\x34\x51\xe0\x2d\x7c\x81\xe4\x08\x56\xa1\x07\x0b\x80\x0b\x89\x0a\x59\x42\x42\x11\xb9\xf1\x34\x48\x3d\x36\x25\x48\x99\x6c\x70\xd0\x77\x6a\x71\x80\xe0\x29\xbb\xf6\x32\xef\xb9\x87\x08\xf3\x27\x67\xe8\xd8\xbd\x26\xbd\xd2\x8d\x28\x36\xa9\x40\xac\x72\x2a\xf4\xca\x9b\x88\xad\xf4\xa8\x41\x42\x42\x11\x91\xbd\xc9\x14\x9f\xd0\x71\x00\xef\x49\xf4\xae\xc8\x85\x40\x8d\x9e\x3a\xc7\x6e\xe0\xa2\xca\x0d\x6d\xad\x8a\x50\xf8\xf5\x40\x02\x95\xf8\x94\x4a\x4e\xbf\x0d\x14\xc2\x89\x96\x33\x61\xac\x47\xff\xb0\x1e\xd0\x31\x82\xbd\x5b\xb1\x97\x67\x7b\xf2\x53\x37\xb4\x22\x82\xe7\x85\x62\x8e\xe5\xbc\xa8\x42\xac\x15\xb9\x82\x4d\x9f\xb7\x1f\xee\xd8\x77\x69\x2d\xb5\x5e\xbf\xb4\xb7\xdf\x84\x06\x0f\x9d\xa3\x8b\x73\x7f\x1b\x49\x73\x58\x9b\x92\x33\x7c\xb9\x1c\xe0\xe4\x36\x51\x9d\x4c\xc4\x25\x35\x27\xad\x58\x4e\xdc\xc4\xe3\xa0\x05\x6f\x42\xfc\x05\x8f\x5f\x15\xa0\x79\x83\xb6\xd1\x98\x63\x03\xa8\x98\x04\xfe\x44\xe6\x1d\xad\x60\xfa\xce\x29\x6e\x88\xab\x74\x46\x0c\xda\xa4\x04\xb4\xd5\x99\xc2\x84\x96\x20\x29\x8e\xea\x33\x8d\x8d\xcd\x64\xc1\xd4\x79\x67\x44\x2c\x45\xce\x62\xbe\xe0\x31\xb7\x9b\xa3\xb7\x1e\xa0\x34\x11\x95\x88\xac\xea\x94\x98\xcf\x8b\xd2\xe4\x98\x90\xc9\x28\x58\x55\xf9\x04\xb7\x66\xf7\x1a\x0b\xbf\x59\x77\xe6\xce\xa0\xa1\xe8\x86\x56\x54\x09\x4d\xe0\x0b\x82\xe3\x5f\x5f\x37\x2a\x67\x21\x74\x62\x42\xe1\xc2\x25\x2a\xbc\x19\x3a\x2c\x2a\x90\x3d\xb5\xae\x05\x6f\xf1\xe6\xae\x4b\x8a\x2d\xcf\x15\xe3\x58\xc8\xf1\xaa\xf2\x39\xac\x3d\x63\x5d\xba\x26\xd9\x06\x50\xd4\xc2\x38\xa5\x3f\xce\xdd\x99\xfe\x4a\xcc\x65\x6f\x3a\xf2\x13\x6b\x28\x17\x21\x17\x51\xff\xb5\x91\xcb\x17\x50\x8f\x0d\x52\xef\xb4\x23\xda\xd1\x37\x8f\x5c\x7a\xc5\x0f\xd7\x3d\x28\xd2\x15\xb1\xde\xfa\xbc\xb6\xc3\x81\x33\xe9\xf2\xce\x82\x7a\xcb\x64\xf2\x5e\x5c\xf4\xa0\x66\x74\x72\x72\xe6\x9a\x76\xc3\xa0\xb5\xb2\x58\xc9\x89\xaa\x2a\x06\x4f\xf7\xdd\xe9\x4b\x05\x59\xa7\xb3\x33\xe3\x37\x62\x6e\xb2\x19\xfd\x79\x68\xdd\x1d\x9b\x36\x40\x33\x0d\x99\xc8\x39\x9b\x75\xd2\x9e\x18\x75\x87\x2b\xcf\x30\x26\xde\x21\x70\x93\x88\x4e\x19\x02\x62\xd1\x99\x72\x4e\x96\xc6\xd8\x67\x3a\x21\xa7\xc5\x3e\xd0\x81\xb6\x42\x56\xa0\xe3\xc7\xd9\xbc\xc3\x3f\xf2\x65\x43\x0d\x7d\x0e\x5b\x28\x88\x79\xef\x6d\xa8\x11\xd1\x9f\xae\x5d\xf9\x06\xb1\xe9\x17\x95\xe5\x0f\x74\x8e\x4a\x3f\x94\x40\xc4\x30\xbc\xb7\xbe\x3b\xce\x22\x38\x8a\x58\xdb\x2b\xd6\xdc\x0a\x7d\x99\xe8\x7f\xa7\xd1\xc9\xea\xf9\x49\x1e\x8b\x7f\x0d\x07\x95\x01\x34\xa1\x60\x41\xc3\x03\xa8\x90\xcf\xc0\x7f\x24\x2b\x28\x83\xb3\x18\xae\xbe\xbd\xfa\xa5\x8a\x06\xdb\x1a\x9b\x67\x77\xff\xb7\xa2\xa2\x15\x84\x2c\xba\xaa\x88\xd3\xf4\xf7\x2f\xe1\xcf\x4d\xa1\xa8\x5e\x18\x0c\x78\xa0\xef\x56\xdf\x7f\x02\x00\x00\xff\xff\xd9\x0d\x89\x8d\xcc\x27\x00\x00")

func GeneratorsAssetsI18nSoracomApiTextJaJsonBytes() ([]byte, error) {
	return bindataRead(
		_GeneratorsAssetsI18nSoracomApiTextJaJson,
		"../generators/assets/i18n/soracom-api.text.ja.json",
	)
}

func GeneratorsAssetsI18nSoracomApiTextJaJson() (*asset, error) {
	bytes, err := GeneratorsAssetsI18nSoracomApiTextJaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../generators/assets/i18n/soracom-api.text.ja.json", size: 10188, mode: os.FileMode(420), modTime: time.Unix(1459935140, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../generators/assets/i18n/soracom-api.text.en.json": GeneratorsAssetsI18nSoracomApiTextEnJson,
	"../generators/assets/i18n/soracom-api.text.ja.json": GeneratorsAssetsI18nSoracomApiTextJaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"generators": &bintree{nil, map[string]*bintree{
			"assets": &bintree{nil, map[string]*bintree{
				"i18n": &bintree{nil, map[string]*bintree{
					"soracom-api.text.en.json": &bintree{GeneratorsAssetsI18nSoracomApiTextEnJson, map[string]*bintree{}},
					"soracom-api.text.ja.json": &bintree{GeneratorsAssetsI18nSoracomApiTextJaJson, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

